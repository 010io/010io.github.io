// –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ —Å–æ—Ü—ñ–∞–ª—å–Ω–∏–º–∏ –º–µ—Ä–µ–∂–∞–º–∏ –¥–ª—è 010io
class SocialIntegration {
    constructor() {
        this.platforms = {
            bluesky: {
                name: 'Bluesky',
                handle: '010io.bsky.social',
                url: 'https://bsky.app/profile/010io.bsky.social',
                icon: 'ü¶ã'
            },
            telegram: {
                name: 'Telegram',
                handle: 't010io',
                url: 'https://t.me/t010io',
                icon: 'üì±'
            },
            discord: {
                name: 'Discord',
                handle: '010io',
                url: 'https://discord.gg/010io',
                icon: 'üéÆ'
            },
            twitter: {
                name: 'X/Twitter',
                handle: 'X010io',
                url: 'https://x.com/X010io',
                icon: 'üê¶'
            },
            instagram: {
                name: 'Instagram',
                handle: 'x010io',
                url: 'https://www.instagram.com/x010io',
                icon: 'üì∏'
            },
            soundcloud: {
                name: 'SoundCloud',
                handle: 'igor-omelchenko',
                url: 'https://soundcloud.com/igor-omelchenko',
                icon: 'üéµ'
            },
            spotify: {
                name: 'Spotify',
                handle: '16jo2zGRmbAch9vlS04bTC',
                url: 'https://open.spotify.com/artist/16jo2zGRmbAch9vlS04bTC',
                icon: 'üéß'
            }
        };
        
        this.cache = new Map();
        this.cacheTimeout = 10 * 60 * 1000; // 10 —Ö–≤–∏–ª–∏–Ω
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Bluesky (—Å–∏–º—É–ª—è—Ü—ñ—è, –æ—Å–∫—ñ–ª—å–∫–∏ API –æ–±–º–µ–∂–µ–Ω–∏–π)
    async getBlueskyStats() {
        const cached = this.cache.get('bluesky-stats');
        if (cached && (Date.now() - cached.timestamp < this.cacheTimeout)) {
            return cached.data;
        }

        // –°–∏–º—É–ª—è—Ü—ñ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ —Ç—É—Ç –±—É–≤ –±–∏ API –∑–∞–ø–∏—Ç)
        const stats = {
            posts: Math.floor(Math.random() * 50) + 25,
            followers: Math.floor(Math.random() * 200) + 100,
            following: Math.floor(Math.random() * 150) + 50,
            lastPost: this.getRandomRecentDate()
        };

        this.cache.set('bluesky-stats', { data: stats, timestamp: Date.now() });
        return stats;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó –Ω–µ–¥–∞–≤–Ω—å–æ—ó –¥–∞—Ç–∏
    getRandomRecentDate() {
        const now = new Date();
        const daysAgo = Math.floor(Math.random() * 7); // –û—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤
        const date = new Date(now.getTime() - daysAgo * 24 * 60 * 60 * 1000);
        return date.toISOString();
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Telegram (—Å–∏–º—É–ª—è—Ü—ñ—è)
    async getTelegramStats() {
        const cached = this.cache.get('telegram-stats');
        if (cached && (Date.now() - cached.timestamp < this.cacheTimeout)) {
            return cached.data;
        }

        const stats = {
            subscribers: Math.floor(Math.random() * 100) + 50,
            messages: Math.floor(Math.random() * 500) + 200,
            online: Math.floor(Math.random() * 20) + 5
        };

        this.cache.set('telegram-stats', { data: stats, timestamp: Date.now() });
        return stats;
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—ñ–≤ —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –º–µ—Ä–µ–∂
    createSocialWidget(platform, stats = {}) {
        const platformData = this.platforms[platform];
        if (!platformData) return null;

        const widget = document.createElement('div');
        widget.className = 'social-widget';
        widget.innerHTML = `
            <div class="social-widget-header">
                <span class="social-icon">${platformData.icon}</span>
                <span class="social-name">${platformData.name}</span>
            </div>
            <div class="social-stats">
                ${this.formatStats(platform, stats)}
            </div>
            <a href="${platformData.url}" target="_blank" class="social-link-btn">
                –í—ñ–¥–≤—ñ–¥–∞—Ç–∏ ‚Üí
            </a>
        `;

        return widget;
    }

    // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
    formatStats(platform, stats) {
        switch (platform) {
            case 'bluesky':
                return `
                    <div class="stat-item">
                        <span class="stat-number">${stats.posts || '...'}</span>
                        <span class="stat-label">–ü–æ—Å—Ç—ñ–≤</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number">${stats.followers || '...'}</span>
                        <span class="stat-label">–ü—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤</span>
                    </div>
                `;
            case 'telegram':
                return `
                    <div class="stat-item">
                        <span class="stat-number">${stats.subscribers || '...'}</span>
                        <span class="stat-label">–£—á–∞—Å–Ω–∏–∫—ñ–≤</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-number">${stats.online || '...'}</span>
                        <span class="stat-label">–û–Ω–ª–∞–π–Ω</span>
                    </div>
                `;
            default:
                return `
                    <div class="stat-item">
                        <span class="stat-label">–ê–∫—Ç–∏–≤–Ω–∏–π</span>
                    </div>
                `;
        }
    }

    // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∫–ª—ñ–∫—ñ–≤ –ø–æ —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –º–µ—Ä–µ–∂–∞—Ö
    trackSocialClick(platform, action = 'click') {
        console.log(`Social Media Analytics: ${platform} - ${action}`);
        
        // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ Google Analytics, Mixpanel, –∞–±–æ —ñ–Ω—à–∏–π —Å–µ—Ä–≤—ñ—Å –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
        if (typeof gtag !== 'undefined') {
            gtag('event', 'social_click', {
                'platform': platform,
                'action': action
            });
        }

        // –õ–æ–∫–∞–ª—å–Ω–µ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const localStats = JSON.parse(localStorage.getItem('010io-social-stats') || '{}');
        localStats[platform] = (localStats[platform] || 0) + 1;
        localStorage.setItem('010io-social-stats', JSON.stringify(localStats));
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª—ñ–∫—ñ–≤
    getLocalClickStats() {
        return JSON.parse(localStorage.getItem('010io-social-stats') || '{}');
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—ó –∫–∞—Ä—Ç–∏ —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –º–µ—Ä–µ–∂
    createInteractiveSocialMap(containerId) {
        const container = document.getElementById(containerId);
        if (!container) return;

        container.innerHTML = '';
        container.className = 'social-map-container';

        Object.entries(this.platforms).forEach(([key, platform]) => {
            const socialCard = document.createElement('div');
            socialCard.className = 'social-map-card';
            socialCard.innerHTML = `
                <div class="social-card-icon">${platform.icon}</div>
                <div class="social-card-name">${platform.name}</div>
                <div class="social-card-handle">@${platform.handle}</div>
                <div class="social-card-stats" id="stats-${key}">
                    <div class="loading-dots">...</div>
                </div>
            `;

            // –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –∫–ª—ñ–∫—ñ–≤
            socialCard.addEventListener('click', () => {
                this.trackSocialClick(key);
                window.open(platform.url, '_blank');
            });

            container.appendChild(socialCard);

            // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏
            this.loadPlatformStats(key);
        });
    }

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏
    async loadPlatformStats(platform) {
        const statsContainer = document.getElementById(`stats-${platform}`);
        if (!statsContainer) return;

        try {
            let stats;
            switch (platform) {
                case 'bluesky':
                    stats = await this.getBlueskyStats();
                    statsContainer.innerHTML = `
                        <div class="mini-stat">üìù ${stats.posts}</div>
                        <div class="mini-stat">üë• ${stats.followers}</div>
                    `;
                    break;
                case 'telegram':
                    stats = await this.getTelegramStats();
                    statsContainer.innerHTML = `
                        <div class="mini-stat">üë• ${stats.subscribers}</div>
                        <div class="mini-stat">üü¢ ${stats.online}</div>
                    `;
                    break;
                default:
                    statsContainer.innerHTML = '<div class="mini-stat">‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π</div>';
            }
        } catch (error) {
            console.error(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ${platform}:`, error);
            statsContainer.innerHTML = '<div class="mini-stat">üìä N/A</div>';
        }
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—É –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ—Å—Ç—ñ–≤ (—Å–∏–º—É–ª—è—Ü—ñ—è)
    async createRecentPostsWidget(containerId, limit = 3) {
        const container = document.getElementById(containerId);
        if (!container) return;

        container.innerHTML = '<div class="loading">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤...</div>';

        try {
            // –°–∏–º—É–ª—è—Ü—ñ—è –ø–æ—Å—Ç—ñ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ - API –∑–∞–ø–∏—Ç–∏)
            const posts = [
                {
                    platform: 'bluesky',
                    content: '–ü—Ä–∞—Ü—é—é –Ω–∞–¥ –Ω–æ–≤–∏–º AI –ø—Ä–æ–µ–∫—Ç–æ–º –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏ üá∫üá¶',
                    timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 –≥–æ–¥–∏–Ω–∏ —Ç–æ–º—É
                    likes: 15,
                    reposts: 3
                },
                {
                    platform: 'telegram',
                    content: '–û–Ω–æ–≤–∏–≤ mesh-api-cli –∑ –Ω–æ–≤–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ NFC',
                    timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000), // 6 –≥–æ–¥–∏–Ω —Ç–æ–º—É
                    views: 89
                },
                {
                    platform: 'twitter',
                    content: 'Termux + Python + AI = ‚ù§Ô∏è –ù–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –¥–ª—è Android —Ä–æ–∑—Ä–æ–±–∫–∏',
                    timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000), // 1 –¥–µ–Ω—å —Ç–æ–º—É
                    likes: 23,
                    retweets: 7
                }
            ];

            container.innerHTML = '';
            posts.slice(0, limit).forEach(post => {
                const postElement = this.createPostElement(post);
                container.appendChild(postElement);
            });

        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤:', error);
            container.innerHTML = '<div class="error">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤</div>';
        }
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—É –ø–æ—Å—Ç–∞
    createPostElement(post) {
        const postDiv = document.createElement('div');
        postDiv.className = 'social-post';
        
        const platformData = this.platforms[post.platform];
        const timeAgo = this.formatTimeAgo(post.timestamp);
        
        postDiv.innerHTML = `
            <div class="post-header">
                <span class="post-platform">${platformData?.icon || 'üì±'} ${platformData?.name || post.platform}</span>
                <span class="post-time">${timeAgo}</span>
            </div>
            <div class="post-content">${post.content}</div>
            <div class="post-stats">
                ${post.likes ? `‚ù§Ô∏è ${post.likes}` : ''}
                ${post.reposts ? `üîÑ ${post.reposts}` : ''}
                ${post.retweets ? `üîÑ ${post.retweets}` : ''}
                ${post.views ? `üëÅÔ∏è ${post.views}` : ''}
            </div>
        `;

        return postDiv;
    }

    // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É "—Ç–æ–º—É"
    formatTimeAgo(date) {
        const now = new Date();
        const diff = now - date;
        const minutes = Math.floor(diff / (1000 * 60));
        const hours = Math.floor(diff / (1000 * 60 * 60));
        const days = Math.floor(diff / (1000 * 60 * 60 * 24));

        if (minutes < 60) return `${minutes}—Ö–≤ —Ç–æ–º—É`;
        if (hours < 24) return `${hours}–≥–æ–¥ —Ç–æ–º—É`;
        return `${days}–¥ —Ç–æ–º—É`;
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –≤—ñ–¥–∂–µ—Ç—ñ–≤
    async initializeAll() {
        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ä—Ç–∏ —Å–æ—Ü—ñ–∞–ª—å–Ω–∏—Ö –º–µ—Ä–µ–∂
        this.createInteractiveSocialMap('social-map');
        
        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∂–µ—Ç—É –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –ø–æ—Å—Ç—ñ–≤
        await this.createRecentPostsWidget('recent-posts');
        
        // –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è
        this.setupAnalytics();
    }

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
    setupAnalytics() {
        // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —á–∞—Å—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
        let startTime = Date.now();
        
        window.addEventListener('beforeunload', () => {
            const timeSpent = Math.floor((Date.now() - startTime) / 1000);
            console.log(`–ß–∞—Å –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ: ${timeSpent} —Å–µ–∫—É–Ω–¥`);
        });

        // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        let maxScroll = 0;
        window.addEventListener('scroll', () => {
            const scrollPercent = Math.round((window.scrollY / (document.body.scrollHeight - window.innerHeight)) * 100);
            if (scrollPercent > maxScroll) {
                maxScroll = scrollPercent;
            }
        });
    }
}

// –ï–∫—Å–ø–æ—Ä—Ç
if (typeof module !== 'undefined' && module.exports) {
    module.exports = SocialIntegration;
} else {
    window.SocialIntegration = SocialIntegration;
}