// –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ Zapier Chat –¥–ª—è 010io
class EnhancedZapierIntegration {
    constructor(chatbotId = 'cm4mf6c1q0001131mpgknchkh') {
        this.chatbotId = chatbotId;
        this.isInitialized = false;
        this.chatHistory = [];
        this.userPreferences = this.loadUserPreferences();
        this.analytics = {
            sessionsStarted: 0,
            messagesExchanged: 0,
            averageSessionTime: 0,
            popularQuestions: new Map()
        };
        
        this.initializeEnhancedChat();
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ —á–∞—Ç—É
    async initializeEnhancedChat() {
        try {
            // –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Zapier —Å–∫—Ä–∏–ø—Ç—É
            await this.waitForZapierLoad();
            
            // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
            this.setupEnhancedInterface();
            
            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
            this.initializeAnalytics();
            
            // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
            this.setupAutoMessages();
            
            this.isInitialized = true;
            console.log('010io Enhanced Chat —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
            
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —á–∞—Ç—É:', error);
        }
    }

    // –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Zapier
    waitForZapierLoad() {
        return new Promise((resolve, reject) => {
            let attempts = 0;
            const maxAttempts = 50;
            
            const checkZapier = () => {
                attempts++;
                
                if (window.zapierChat) {
                    resolve();
                } else if (attempts >= maxAttempts) {
                    reject(new Error('Zapier Chat –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤—Å—è'));
                } else {
                    setTimeout(checkZapier, 200);
                }
            };
            
            checkZapier();
        });
    }

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
    setupEnhancedInterface() {
        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –ø–æ–≤–µ—Ä—Ö Zapier
        this.createCustomChatInterface();
        
        // –î–æ–¥–∞–≤–∞–Ω–Ω—è —à–≤–∏–¥–∫–∏—Ö –∫–æ–º–∞–Ω–¥
        this.addQuickCommands();
        
        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è
        this.setupThemes();
        
        // –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–Ω–∏—Ö —Å–∫–æ—Ä–æ—á–µ–Ω—å
        this.setupKeyboardShortcuts();
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
    createCustomChatInterface() {
        const chatContainer = document.createElement('div');
        chatContainer.id = 'enhanced-chat-container';
        chatContainer.className = 'enhanced-chat-container';
        chatContainer.innerHTML = `
            <div class="chat-header">
                <div class="chat-title">
                    <span class="chat-icon">ü§ñ</span>
                    <span class="chat-name">010io-GPT</span>
                    <span class="chat-status" id="chat-status">–ì–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏</span>
                </div>
                <div class="chat-controls">
                    <button class="chat-btn" id="chat-minimize" title="–ó–≥–æ—Ä–Ω—É—Ç–∏">‚àí</button>
                    <button class="chat-btn" id="chat-close" title="–ó–∞–∫—Ä–∏—Ç–∏">√ó</button>
                </div>
            </div>
            <div class="chat-quick-actions">
                <button class="quick-action" data-action="projects">üöÄ –ú–æ—ó –ø—Ä–æ–µ–∫—Ç–∏</button>
                <button class="quick-action" data-action="skills">üíª –ù–∞–≤–∏—á–∫–∏</button>
                <button class="quick-action" data-action="contact">üìß –ö–æ–Ω—Ç–∞–∫—Ç–∏</button>
                <button class="quick-action" data-action="help">‚ùì –î–æ–ø–æ–º–æ–≥–∞</button>
            </div>
            <div class="chat-suggestions" id="chat-suggestions">
                <div class="suggestion-title">–ü–æ–ø—É–ª—è—Ä–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è:</div>
                <div class="suggestions-list" id="suggestions-list"></div>
            </div>
        `;

        // –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
        this.setupChatEventListeners(chatContainer);
        
        // –ü—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        chatContainer.style.display = 'none';
        document.body.appendChild(chatContainer);
    }

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
    setupChatEventListeners(container) {
        // –®–≤–∏–¥–∫—ñ –¥—ñ—ó
        container.querySelectorAll('.quick-action').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const action = e.target.dataset.action;
                this.handleQuickAction(action);
            });
        });

        // –ö–µ—Ä—É–≤–∞–Ω–Ω—è –≤—ñ–∫–Ω–æ–º —á–∞—Ç—É
        container.querySelector('#chat-minimize').addEventListener('click', () => {
            this.minimizeChat();
        });

        container.querySelector('#chat-close').addEventListener('click', () => {
            this.closeChat();
        });
    }

    // –û–±—Ä–æ–±–∫–∞ —à–≤–∏–¥–∫–∏—Ö –¥—ñ–π
    handleQuickAction(action) {
        const responses = {
            projects: "–û—Å—å –º–æ—ó –æ—Å–Ω–æ–≤–Ω—ñ –ø—Ä–æ–µ–∫—Ç–∏:\n\nü§ñ AI Chatbot - —Ä–æ–∑—É–º–Ω–∏–π —á–∞—Ç-–±–æ—Ç\nüéµ Voice Translation - –≥–æ–ª–æ—Å–æ–≤–∏–π –ø–µ—Ä–µ–∫–ª–∞–¥\nüîß Mesh API CLI - —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –¥–ª—è mesh –º–µ—Ä–µ–∂\nüì± Universal Reader - —Ä–µ–∂–∏–º —á–∏—Ç–∞–Ω–Ω—è\n\n–ü—Ä–æ —è–∫–∏–π –ø—Ä–æ–µ–∫—Ç —Ö–æ—á–µ—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ?",
            
            skills: "–ú–æ—ó –æ—Å–Ω–æ–≤–Ω—ñ –Ω–∞–≤–∏—á–∫–∏:\n\nüíª –ü—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è: Python, JavaScript, PowerShell\nü§ñ AI/ML: PyTorch, TensorFlow, LangChain\nüì± –ú–æ–±—ñ–ª—å–Ω–∞ —Ä–æ–∑—Ä–æ–±–∫–∞: Android, Termux\nüåê –í–µ–±: HTML/CSS, Node.js, API\nüîß DevOps: Git, CI/CD, Docker\n\n–Ø–∫—ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó –≤–∞—Å —Ü—ñ–∫–∞–≤–ª—è—Ç—å?",
            
            contact: "–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑—ñ –º–Ω–æ—é –º–æ–∂–Ω–∞ —á–µ—Ä–µ–∑:\n\nüìß Email: contact@010io.com\nüê¶ Twitter: @X010io\nüì± Telegram: @t010io\nü¶ã Bluesky: @010io.bsky.social\nüéÆ Discord: 010io\n\n–û–±–µ—Ä—ñ—Ç—å –∑—Ä—É—á–Ω–∏–π —Å–ø–æ—Å—ñ–± –∑–≤'—è–∑–∫—É!",
            
            help: "–Ø –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑:\n\n‚ùì –í—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–æ –º–æ—ó –ø—Ä–æ–µ–∫—Ç–∏\nüí° –¢–µ—Ö–Ω—ñ—á–Ω—ñ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π\nüìö –ù–∞–≤—á–∞–ª—å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏\nü§ù –°–ø—ñ–≤–ø—Ä–∞—Ü—è\n\n–ü—Ä–æ —â–æ —Ö–æ—á–µ—Ç–µ –∑–∞–ø–∏—Ç–∞—Ç–∏?"
        };

        this.sendPredefinedMessage(responses[action]);
        this.trackQuickAction(action);
    }

    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å –≤–∏–∑–Ω–∞—á–µ–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    sendPredefinedMessage(message) {
        if (window.zapierChat && window.zapierChat.sendMessage) {
            window.zapierChat.sendMessage(message);
        } else {
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Å–ø–æ—Å—ñ–± - —Å–∏–º—É–ª—è—Ü—ñ—è –≤–≤–µ–¥–µ–Ω–Ω—è
            this.simulateUserInput(message);
        }
    }

    // –°–∏–º—É–ª—è—Ü—ñ—è –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    simulateUserInput(message) {
        const chatInput = document.querySelector('input[placeholder*="–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"], textarea[placeholder*="–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"]');
        if (chatInput) {
            chatInput.value = message;
            chatInput.dispatchEvent(new Event('input', { bubbles: true }));
            
            // –ü–æ—à—É–∫ –∫–Ω–æ–ø–∫–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
            const sendButton = document.querySelector('button[type="submit"], button[aria-label*="send"], button[title*="send"]');
            if (sendButton) {
                sendButton.click();
            }
        }
    }

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è —à–≤–∏–¥–∫–∏—Ö –∫–æ–º–∞–Ω–¥
    addQuickCommands() {
        const commands = {
            '/projects': () => this.handleQuickAction('projects'),
            '/skills': () => this.handleQuickAction('skills'),
            '/contact': () => this.handleQuickAction('contact'),
            '/help': () => this.handleQuickAction('help'),
            '/stats': () => this.showChatStats(),
            '/clear': () => this.clearChatHistory()
        };

        // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && e.target.tagName === 'INPUT') {
                const value = e.target.value.trim();
                if (commands[value]) {
                    e.preventDefault();
                    commands[value]();
                    e.target.value = '';
                }
            }
        });
    }

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–º
    setupThemes() {
        const themes = {
            dark: {
                '--chat-bg': '#0d1117',
                '--chat-text': '#c9d1d9',
                '--chat-border': '#21262d',
                '--chat-accent': '#58a6ff'
            },
            light: {
                '--chat-bg': '#ffffff',
                '--chat-text': '#24292f',
                '--chat-border': '#d0d7de',
                '--chat-accent': '#0969da'
            },
            blue: {
                '--chat-bg': '#0f1419',
                '--chat-text': '#e6edf3',
                '--chat-border': '#1c2128',
                '--chat-accent': '#79b8ff'
            }
        };

        // –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ç–µ–º–∏
        const currentTheme = this.userPreferences.theme || 'dark';
        this.applyTheme(themes[currentTheme]);
    }

    // –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ç–µ–º–∏
    applyTheme(theme) {
        Object.entries(theme).forEach(([property, value]) => {
            document.documentElement.style.setProperty(property, value);
        });
    }

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–Ω–∏—Ö —Å–∫–æ—Ä–æ—á–µ–Ω—å
    setupKeyboardShortcuts() {
        document.addEventListener('keydown', (e) => {
            // Ctrl/Cmd + K - –≤—ñ–¥–∫—Ä–∏—Ç–∏ —á–∞—Ç
            if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
                e.preventDefault();
                this.openEnhancedChat();
            }
            
            // Escape - –∑–∞–∫—Ä–∏—Ç–∏ —á–∞—Ç
            if (e.key === 'Escape' && this.isChatOpen()) {
                this.closeChat();
            }
            
            // Ctrl/Cmd + Shift + C - –æ—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é
            if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'C') {
                this.clearChatHistory();
            }
        });
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
    initializeAnalytics() {
        // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        const savedAnalytics = localStorage.getItem('010io-chat-analytics');
        if (savedAnalytics) {
            Object.assign(this.analytics, JSON.parse(savedAnalytics));
        }

        // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å–µ—Å—ñ–π
        this.sessionStartTime = Date.now();
        this.analytics.sessionsStarted++;
        
        // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ
        window.addEventListener('beforeunload', () => {
            this.saveAnalytics();
        });
    }

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    setupAutoMessages() {
        // –ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –Ω–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        if (!this.userPreferences.hasVisited) {
            setTimeout(() => {
                this.showWelcomeMessage();
            }, 3000);
            
            this.userPreferences.hasVisited = true;
            this.saveUserPreferences();
        }

        // –ü—ñ–¥–∫–∞–∑–∫–∏ —á–µ—Ä–µ–∑ –ø–µ–≤–Ω–∏–π —á–∞—Å
        setTimeout(() => {
            this.showHelpTips();
        }, 30000); // 30 —Å–µ–∫—É–Ω–¥
    }

    // –ü–æ–∫–∞–∑ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    showWelcomeMessage() {
        this.showNotification(
            '–ü—Ä–∏–≤—ñ—Ç! üëã –Ø 010io-GPT. –ó–∞–ø–∏—Ç–∞–π—Ç–µ –º–µ–Ω–µ –ø—Ä–æ –ø—Ä–æ–µ–∫—Ç–∏ –Ü–≥–æ—Ä—è –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å —à–≤–∏–¥–∫–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏!',
            'info',
            5000
        );
    }

    // –ü–æ–∫–∞–∑ –ø—ñ–¥–∫–∞–∑–æ–∫
    showHelpTips() {
        const tips = [
            '–°–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /projects –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø—Ä–æ–µ–∫—Ç—ñ–≤',
            '–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+K –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —á–∞—Ç—É',
            '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —à–≤–∏–¥–∫—ñ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å'
        ];
        
        const randomTip = tips[Math.floor(Math.random() * tips.length)];
        this.showNotification(`üí° –ü—ñ–¥–∫–∞–∑–∫–∞: ${randomTip}`, 'info', 4000);
    }

    // –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ —á–∞—Ç—É
    openEnhancedChat() {
        if (!this.isInitialized) {
            this.showNotification('–ß–∞—Ç —â–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è...', 'warning');
            return;
        }

        // –ü–æ–∫–∞–∑ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        const container = document.getElementById('enhanced-chat-container');
        if (container) {
            container.style.display = 'block';
            container.classList.add('chat-opening');
        }

        // –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ Zapier —á–∞—Ç—É
        if (window.zapierChat && window.zapierChat.open) {
            window.zapierChat.open();
        }

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
        this.updateChatStatus('–ê–∫—Ç–∏–≤–Ω–∏–π');
        
        // –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞
        this.analytics.sessionsStarted++;
        this.trackChatOpen();
    }

    // –ó–∞–∫—Ä–∏—Ç—Ç—è —á–∞—Ç—É
    closeChat() {
        const container = document.getElementById('enhanced-chat-container');
        if (container) {
            container.style.display = 'none';
            container.classList.remove('chat-opening');
        }

        if (window.zapierChat && window.zapierChat.close) {
            window.zapierChat.close();
        }

        this.updateChatStatus('–ì–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏');
        this.trackChatClose();
    }

    // –ó–≥–æ—Ä—Ç–∞–Ω–Ω—è —á–∞—Ç—É
    minimizeChat() {
        const container = document.getElementById('enhanced-chat-container');
        if (container) {
            container.classList.toggle('minimized');
        }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É —á–∞—Ç—É
    isChatOpen() {
        const container = document.getElementById('enhanced-chat-container');
        return container && container.style.display !== 'none';
    }

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —á–∞—Ç—É
    updateChatStatus(status) {
        const statusElement = document.getElementById('chat-status');
        if (statusElement) {
            statusElement.textContent = status;
        }
    }

    // –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç—É
    showChatStats() {
        const stats = `
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç—É:
‚Ä¢ –°–µ—Å—ñ–π —Ä–æ–∑–ø–æ—á–∞—Ç–æ: ${this.analytics.sessionsStarted}
‚Ä¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –æ–±–º—ñ–Ω—è–Ω–æ: ${this.analytics.messagesExchanged}
‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å —Å–µ—Å—ñ—ó: ${Math.round(this.analytics.averageSessionTime / 1000)}—Å
‚Ä¢ –ü–æ–ø—É–ª—è—Ä–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è: ${this.getTopQuestions()}
        `;
        
        this.showNotification(stats, 'info', 8000);
    }

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–ø –ø–∏—Ç–∞–Ω—å
    getTopQuestions() {
        const sorted = Array.from(this.analytics.popularQuestions.entries())
            .sort(([,a], [,b]) => b - a)
            .slice(0, 3);
        
        return sorted.map(([question, count]) => `${question} (${count})`).join(', ') || '–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö';
    }

    // –û—á–∏—â–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —á–∞—Ç—É
    clearChatHistory() {
        this.chatHistory = [];
        this.showNotification('–Ü—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É –æ—á–∏—â–µ–Ω–æ', 'success');
    }

    // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –¥—ñ–π
    trackQuickAction(action) {
        console.log(`Quick Action: ${action}`);
        this.analytics.popularQuestions.set(action, (this.analytics.popularQuestions.get(action) || 0) + 1);
    }

    trackChatOpen() {
        console.log('Chat opened');
        this.sessionStartTime = Date.now();
    }

    trackChatClose() {
        console.log('Chat closed');
        if (this.sessionStartTime) {
            const sessionTime = Date.now() - this.sessionStartTime;
            this.analytics.averageSessionTime = 
                (this.analytics.averageSessionTime + sessionTime) / 2;
        }
    }

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    saveUserPreferences() {
        localStorage.setItem('010io-user-preferences', JSON.stringify(this.userPreferences));
    }

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    loadUserPreferences() {
        const saved = localStorage.getItem('010io-user-preferences');
        return saved ? JSON.parse(saved) : {
            theme: 'dark',
            hasVisited: false,
            language: 'uk'
        };
    }

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏
    saveAnalytics() {
        const analyticsData = {
            ...this.analytics,
            popularQuestions: Array.from(this.analytics.popularQuestions.entries())
        };
        localStorage.setItem('010io-chat-analytics', JSON.stringify(analyticsData));
    }

    // –ü–æ–∫–∞–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    showNotification(message, type = 'info', duration = 3000) {
        const notification = document.createElement('div');
        notification.className = `chat-notification chat-notification-${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <span class="notification-icon">${this.getNotificationIcon(type)}</span>
                <span class="notification-message">${message}</span>
            </div>
        `;
        
        document.body.appendChild(notification);
        
        setTimeout(() => notification.classList.add('show'), 100);
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => notification.remove(), 300);
        }, duration);
    }

    // –Ü–∫–æ–Ω–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    getNotificationIcon(type) {
        const icons = {
            success: '‚úÖ',
            error: '‚ùå',
            warning: '‚ö†Ô∏è',
            info: 'üí¨'
        };
        return icons[type] || icons.info;
    }

    // –ü—É–±–ª—ñ—á–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
    getAnalytics() {
        return { ...this.analytics };
    }

    setTheme(themeName) {
        this.userPreferences.theme = themeName;
        this.saveUserPreferences();
        this.setupThemes();
    }

    exportChatData() {
        return {
            history: this.chatHistory,
            analytics: this.analytics,
            preferences: this.userPreferences
        };
    }
}

// CSS —Å—Ç–∏–ª—ñ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ —á–∞—Ç—É
const enhancedChatStyles = `
    .enhanced-chat-container {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 350px;
        max-height: 500px;
        background: var(--chat-bg, var(--bg-secondary));
        border: 1px solid var(--chat-border, var(--border-color));
        border-radius: 12px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        z-index: 10000;
        overflow: hidden;
        transition: all 0.3s ease;
    }

    .enhanced-chat-container.minimized {
        height: 60px;
        overflow: hidden;
    }

    .chat-header {
        background: var(--chat-accent, var(--primary-color));
        color: white;
        padding: 15px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .chat-title {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .chat-name {
        font-weight: 600;
    }

    .chat-status {
        font-size: 0.8em;
        opacity: 0.8;
    }

    .chat-controls {
        display: flex;
        gap: 5px;
    }

    .chat-btn {
        background: rgba(255, 255, 255, 0.2);
        border: none;
        color: white;
        width: 24px;
        height: 24px;
        border-radius: 4px;
        cursor: pointer;
        font-weight: bold;
    }

    .chat-btn:hover {
        background: rgba(255, 255, 255, 0.3);
    }

    .chat-quick-actions {
        padding: 15px;
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 8px;
        background: var(--chat-bg, var(--bg-secondary));
    }

    .quick-action {
        background: var(--chat-border, var(--border-color));
        border: none;
        color: var(--chat-text, var(--text-primary));
        padding: 8px 12px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 0.8em;
        transition: all 0.3s ease;
    }

    .quick-action:hover {
        background: var(--chat-accent, var(--primary-color));
        color: white;
    }

    .chat-suggestions {
        padding: 15px;
        background: var(--chat-bg, var(--bg-secondary));
        border-top: 1px solid var(--chat-border, var(--border-color));
    }

    .suggestion-title {
        font-size: 0.9em;
        color: var(--chat-text, var(--text-secondary));
        margin-bottom: 10px;
        font-weight: 500;
    }

    .chat-notification {
        position: fixed;
        bottom: 20px;
        left: 20px;
        background: var(--bg-secondary);
        border: 1px solid var(--border-color);
        border-radius: 8px;
        padding: 15px;
        z-index: 10001;
        transform: translateY(100px);
        transition: transform 0.3s ease;
        max-width: 300px;
    }

    .chat-notification.show {
        transform: translateY(0);
    }

    .chat-notification-success {
        border-color: var(--success-color);
    }

    .chat-notification-error {
        border-color: var(--warning-color);
    }

    .chat-notification-warning {
        border-color: #f39c12;
    }

    .notification-content {
        display: flex;
        align-items: flex-start;
        gap: 10px;
    }

    .notification-message {
        color: var(--text-primary);
        font-size: 0.9em;
        line-height: 1.4;
        white-space: pre-line;
    }

    @media (max-width: 768px) {
        .enhanced-chat-container {
            width: calc(100vw - 40px);
            right: 20px;
            left: 20px;
        }
        
        .chat-quick-actions {
            grid-template-columns: 1fr;
        }
    }
`;

// –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤
const chatStyleSheet = document.createElement('style');
chatStyleSheet.textContent = enhancedChatStyles;
document.head.appendChild(chatStyleSheet);

// –ï–∫—Å–ø–æ—Ä—Ç
if (typeof module !== 'undefined' && module.exports) {
    module.exports = EnhancedZapierIntegration;
} else {
    window.EnhancedZapierIntegration = EnhancedZapierIntegration;
}